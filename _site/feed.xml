<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-13T12:46:25-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Johnny Okoniewski</title><subtitle>Full Stack Data Scientist</subtitle><entry><title type="html">Using Machine Learning to Optimize Impact of Election Donations</title><link href="http://localhost:4000/2023/04/28/campaign_finance_predictions/" rel="alternate" type="text/html" title="Using Machine Learning to Optimize Impact of Election Donations" /><published>2023-04-28T13:29:17-04:00</published><updated>2023-04-28T13:29:17-04:00</updated><id>http://localhost:4000/2023/04/28/things-i-can-lift-week7</id><content type="html" xml:base="http://localhost:4000/2023/04/28/campaign_finance_predictions/"><![CDATA[<p>The purpose of this <a href="https://github.com/pavlicag/campaign_finance_donation_optimization/tree/main">project</a> is to address candidates who are struggling to fund their campaigns, even if they have strong beliefs and policies that align with voters' interests by providing a platform that helps users to make informed decisions when voting for candidates. Specifically, the project aims to highlight candidates who are struggling to fund their campaigns and would benefit the most from donations. By doing so, the project seeks to level the playing field and ensure that candidates with strong beliefs and policies have a better chance of winning, regardless of their financial resources.</p>
<p>I helped develop a platform that used a machine learning model to predict the winners of the 2022 House of Represenatives election only using campaign finance data in conjunction with Thao Nguyen, Vivian Pavlica, Ben Ramsey, and Gregory Zavalnitskiy. </p>

<p><!-- wp:image {"align":"center","id":9139,"sizeSlug":"large","linkDestination":"media"} --></p>
<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="/assets/images/flowchart.jpg"><img src="/assets/images/flowchart.jpg" /></a><br />
<figcaption>Courtesy of Thao Nguyen</figcaption>
</div>

<p> </p>
<p>The study utilized data from the Federal Election Commission (FEC), FiveThirtyEight, and OpenSecrets to construct a comprehensive understanding of the numerous factors that contribute to election outcomes. The analysis focused on the 2022 House of Representatives elections, given the high availability and significant correlation between campaign finance and electoral success. Key variables, such as total funds raised, total expenditures, incumbency, and predicted win percentages, were integrated into a predictive model to rank candidates based on their potential impact. Ideological alignment data collected from FiveThirtyEight was also incorporated to facilitate user selection of candidates. The findings were visualized using standard Python data science libraries, providing users with an intuitive and user-friendly interface.</p>

<p>The analysis revealed a strong correlation between campaign financing and electoral outcomes, with 93% of candidates who raised more money emerging victorious in contested races. This underscores the need for greater transparency and accountability in campaign finance, which can be seen looking into the total distribution of money versus win percentage.</p>

<p><!-- wp:image {"align":"center","id":9139,"sizeSlug":"large","linkDestination":"media"} --></p>
<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="/assets/images/combined_disbursement.png"><img src="/assets/images/combined_disbursement.png" /></a><br />
</div>

<p>This project successfully created a platform to address the challenges related to political participation and decision-making by highlighting struggling candidates who would benefit the most from donations based on their beliefs and state. The project's methodology utilized a predictive model created from data on the 2022 House of Representatives elections to identify key candidates and was visualized using standard Python data science libraries. The analysis revealed a strong correlation between campaign financing and electoral outcomes and underscored the need for greater transparency and accountability in campaign finance. However, the project encountered several challenges such as technical issues, effective communication, collaboration, leadership skills, ethical considerations, time management, and project organization. Future work could involve expanding the scope of the platform to include other elections like local elections or developing additional features to facilitate greater user engagement and understanding of the political process.</p>]]></content><author><name>{&quot;display_name&quot;=&gt;&quot;Johnny Okoniewski&quot;, &quot;first_name&quot;=&gt;&quot;Johnny&quot;, &quot;last_name&quot;=&gt;&quot;Okoniewski&quot;}</name></author><category term="data visualization" /><category term="personal" /><category term="data visualization" /><category term="Machine Learning" /><summary type="html"><![CDATA[Demonstrating the impact of campaign donations on the House of Representatives.]]></summary></entry><entry><title type="html">Parallelizing Primes</title><link href="http://localhost:4000/2023/04/20/parallelizing_primes/" rel="alternate" type="text/html" title="Parallelizing Primes" /><published>2023-04-20T14:30:23-04:00</published><updated>2023-04-20T14:30:23-04:00</updated><id>http://localhost:4000/2023/04/20/things-i-can-lift-week7%20copy</id><content type="html" xml:base="http://localhost:4000/2023/04/20/parallelizing_primes/"><![CDATA[<p>The aim of this <a href="https://github.com/johnnyoko/parallelized_primes">project</a> is to explore the computation of prime numbers, a fundamental topic in mathematics that has been of great interest to mathematicians throughout history. The motivation behind this research is to discover a faster way to find prime numbers computationally, or to uncover new prime numbers. While all numbers under 2<sup>110000000</sup> - 1 have been checked using Lucas-Lehmer Primality Testing, verifying these numbers manually is not feasible due to their immense size, making the problem computationally expensive. To address this challenge, the study focuses on the use of parallel computing to increase the speed of prime number discovery.<p>

<p>My code implements a benchmark for finding Mersenne primes using the Lucas-Lehmer test. Mersenne primes are prime numbers that are one less than a power of two, i.e., numbers of the form where p is a prime number. The Lucas-Lehmer test is an efficient method for determining whether a given value of p produces a Mersenne prime.</p>

<p>The main body of the code sets up a range of values of max_p from 1 to 2001 (inclusive), and calls the find_mersenne_primes function for each value. It then stores the total time taken for each value of max_p in a list called times. Finally, the code plots a graph of times versus max_p, which shows how the total time taken varies with the number of processors used for the computation. The resulting graph can be used to identify the optimal number of processors to use for this computation.<p>

<p><!-- wp:image {"align":"center","id":9139,"sizeSlug":"large","linkDestination":"media"} --></p>
<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="/assets/images/primes/first_prime.jpg"><img src="/assets/images/primes/first_prime.jpg" /></a><br />
</div>

<p>The graph shows the computation becomes more complex for larger prime exponents. As the maximum prime exponent increases, the total time taken to find Mersenne primes is expected to increase as well. Due to the exponential complexity of the Lucas-Lehmer test optimization is required for finding new primes. For exponential code, the benefits of optimization and parallelization can be particularly significant, as the cost of computation can grow very quickly with the size of the input data. By optimizing and parallelizing the code, it is be possible to reduce the computation time to a level that is practical or even acceptable for the given problem.</p>

<p><!-- wp:image {"align":"center","id":9139,"sizeSlug":"large","linkDestination":"media"} --></p>
<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="/assets/images/primes/opt_prime.jpg"><img src="/assets/images/primes/opt_prime.jpg" /></a><br />
</div>

<p>The find_mersenne_primes() function uses multiprocessing to distribute the work of finding Mersenne primes across multiple processes. The number of processes to use is specified by the num_processes parameter. The find_mersenne_primes_helper() function is called by find_mersenne_primes() to calculate Mersenne primes in a specific range of prime exponents which allows for distrubuted computing. The lucas_lehmer() function implements the Lucas-Lehmer test for Mersenne primes. To use find_mersenne_primes() function, it takes two parameters: max_p, which is the maximum prime exponent to test for a Mersenne prime, and num_processes, which is the number of processes to use for parallelization. In the current example, it is finding Mersenne primes up to 2000 using 1, 2, 4, and 8 cores.</p>

<p><!-- wp:image {"align":"center","id":9139,"sizeSlug":"large","linkDestination":"media"} --></p>
<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="/assets/images/primes/speedup.jpg"><img src="/assets/images/primes/speedup.jpg" /></a><br />
</div>

<p>Based on the implementation of the Lucas-Lehmer test with parallel processing, we expect that the output of our program will show a significant decrease in the time taken to calculate Mersenne primes as the number of cores used increases. By distributing the computation of Mersenne primes across multiple cores using the multiprocess module, we can take advantage of the parallel computing capabilities of modern CPUs and reduce the overall computation time. The output of my program, which can be found in my GitHub repository, will demonstrate the effectiveness of parallel processing in reducing the time required to calculate Mersenne primes.</p>]]></content><author><name>{&quot;display_name&quot;=&gt;&quot;Johnny Okoniewski&quot;, &quot;first_name&quot;=&gt;&quot;Johnny&quot;, &quot;last_name&quot;=&gt;&quot;Okoniewski&quot;}</name></author><category term="data visualization" /><category term="personal" /><category term="data visualization" /><category term="parallel computing" /><summary type="html"><![CDATA[Exploring faster ways to find prime numbers computationally through parallel computing optimization.]]></summary></entry></feed>